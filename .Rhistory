unique(reduced_data$Month)
#the temperature can now be imputed by the mean based on the day of time and month
mean_temperature_data <- reduced_data %>%
group_by(Month, Time_Of_Day) %>%
summarize(Mean_Temperature = mean(`Temperature(F)`, na.rm = TRUE))
reduced_data <- reduced_data %>%
left_join(mean_temperature_data, by = c("Month", "Time_Of_Day")) %>%
mutate(`Temperature(F)` = ifelse(is.na(`Temperature(F)`), Mean_Temperature, `Temperature(F)`)) %>%
select(-Mean_Temperature)
#the wind speed, unfortunately, requires on an already established weather model, or reading
#from instruments. It will instead be imputed through either the mean or mode for analytical
#and modeling purposes. It's first visualize to find whether the mode or mean is better.
# Create a histogram
hist(reduced_data$`Wind_Speed(mph)`, breaks = 20, main = "Wind Speed Distribution", xlab = "Wind Speed (mph)")
# Create a density plot
density_plot <- density(reduced_data$`Wind_Speed(mph)`, na.rm = TRUE)
plot(density_plot, main = "Wind Speed Density Plot", xlab = "Wind Speed (mph)")
#replace null values with the median
reduced_data$`Wind_Speed(mph)` <- ifelse(is.na(reduced_data$`Wind_Speed(mph)`),
median(reduced_data$`Wind_Speed(mph)`, na.rm = TRUE),
reduced_data$`Wind_Speed(mph)`)
#now, the wind chill can be calculated with the complete tempearture and wind speed variable.
reduced_data <- reduced_data %>% mutate(`Wind_Chill(F)` = ifelse(!is.na(`Temperature(F)`) & !
is.na(`Wind_Speed(mph)`),
calculateWindChill(`Temperature(F)`, `Wind_Speed(mph)`), NA))
#checking whether the median or mean is better suited for density %
#creating a density plot based on the month
library(ggplot2)
gg <- ggplot(reduced_data, aes(x = `Humidity(%)`, fill = factor(Month)))
gg + geom_density(alpha = 0.25) + labs(title = "Density Plot of Humidity % by Month")
#replace null values with the median
reduced_data$`Humidity(%)` <- ifelse(is.na(reduced_data$`Humidity(%)`),
median(reduced_data$`Humidity(%)`, na.rm = TRUE),
reduced_data$`Humidity(%)`)
#imputing the missing pressure values based on temperature and precipitation
plot(reduced_data$`Temperature(F)`, reduced_data$`Precipitation(in)`,
xlab = "Temperature (F)", ylab = "Precipitation (in)",
main = "Scatterplot of Temperature vs. Precipitation")
#linear regression won't work, therefore, we can use KNN
variables_to_impute <- "Pressure(in)"
dist_variables <- c("Temperature(F)", "Precipitation(in)")
reduced_data <- knn(
data = reduced_data,
variable = variables_to_impute,
dist_var = dist_variables,
k = 5,  # You can adjust the number of nearest neighbors as needed
impNA = TRUE
)
#sunrise sunset and the 3 twilight variables can be removed as they are similar to time of day
#variable while providing less
reduced_data <- subset(reduced_data, select = -c(Sunrise_Sunset, Civil_Twilight, Nautical_Twilight, Astronomical_Twilight))
#removing variables used solely for pre-processing
reduced_data <- subset(reduced_data, select = -c(`Pressure(in)_imp`, `Weather_Condition_imp`))
#changing the target value to character data type
reduced_data$Severity <- as.character(reduced_data$Severity)
#simplifying wind direction
reduced_data <- reduced_data %>%
mutate(Wind_Direction = ifelse(Wind_Direction == "North", "N", Wind_Direction))
reduced_data <- reduced_data %>%
mutate(Wind_Direction = ifelse(Wind_Direction == "CALM", "Calm", Wind_Direction))
reduced_data <- reduced_data %>%
mutate(Wind_Direction = ifelse(Wind_Direction == "East", "E", Wind_Direction))
reduced_data <- reduced_data %>%
mutate(Wind_Direction = ifelse(Wind_Direction == "South", "S", Wind_Direction))
reduced_data <- reduced_data %>%
mutate(Wind_Direction = ifelse(Wind_Direction == "Variable", "VAR", Wind_Direction))
reduced_data <- reduced_data %>%
mutate(Wind_Direction = ifelse(Wind_Direction == "West", "W", Wind_Direction))
#checking the properties of the final prepossessed data
str(reduced_data)
summary(reduced_data)
colSums(is.na(reduced_data))
#export the data
#write.csv(reduced_data, "preprocessed_data.csv", row.names = FALSE)
df <- read.csv("preprocessed_data.csv")
#export the data
write.csv(reduced_data, "preprocessed_data2.csv", row.names = FALSE)
library(tidyverse)
df <- read.csv("preprocessed_data2.csv")
library(tidyverse)
df <- read.csv("preprocessed_data2.csv")
library(nnet)
library(caTools)
library(VGAM)
library(MASS)
library(caret)
#encoding
df$Severity <- as.numeric(factor(df$Severity))
df$Month <- as.numeric(factor(df$Month))
df$Wind_Direction <- as.numeric(factor(df$Wind_Direction))
df$Weather_Condition <- as.numeric(factor(df$Weather_Condition))
df$Time_Of_Day <- as.numeric(factor(df$Time_Of_Day))
df <- df %>%
mutate_all(~ as.numeric(.))
str(df)
table(df$Severity)
#set seed
set.seed(1)
#splitting the data
sample <- sample.split(df$Severity, SplitRatio = 0.7)
train_data <- subset(df, sample == TRUE)
test_data <- subset(df, sample == FALSE)
print(table(train_data$Severity))
print(table(test_data$Severity))
# Fit the multinomial logistic regression model
multinom_model <- multinom(Severity ~ Temperature.F. + Wind_Chill.F. + Humidity... + Pressure.in. +
Visibility.mi. + Wind_Direction + Wind_Speed.mph. + Precipitation.in. +
Weather_Condition + Amenity + Bump + Crossing + Give_Way + Junction +
No_Exit + Railway + Roundabout + Station + Stop + Traffic_Calming +
Traffic_Signal + Turning_Loop + Time_Of_Day + Month,
data = train_data)
summary(multinom_model)
predicted <- predict(multinom_model, newdata = test_data)
# Create a confusion matrix
conf_matrix <- confusionMatrix(data = predicted, reference = test_data$Severity)
# Create a confusion matrix
conf_matrix <- confusionMatrix(data = predicted, reference = test_data$Severity)
predicted <- predict(multinom_model, newdata = test_data)
# Create a confusion matrix
conf_matrix <- confusionMatrix(data = predicted, reference = test_data$Severity)
colnames(df)
# Fit the multinomial logistic regression model
multinom_model <- multinom(Severity ~ ., data = train_data)
summary(multinom_model)
predicted <- predict(multinom_model, newdata = test_data)
predicted
# Create a confusion matrix
conf_matrix <- confusionMatrix(data = predicted, reference = test_data$Severity)
predicted <- as.numeric(predited)
predicted <- as.numeric(predicted)
# Create a confusion matrix
conf_matrix <- confusionMatrix(data = predicted, reference = test_data$Severity)
predicted <- predict(multinom_model, newdata = test_data)
test_data$Severity <- as.factor(character(test_data$Severity))
test_data$Severity <- as.factor(test_data$Severity)
# Create a confusion matrix
conf_matrix <- confusionMatrix(data = predicted, reference = test_data$Severity)
# Print the confusion matrix
print(conf_matrix)
# Extract and print performance metrics
accuracy <- conf_matrix$overall["Accuracy"]
precision <- conf_matrix$byClass["Precision"]
recall <- conf_matrix$byClass["Sensitivity"]
f1_score <- conf_matrix$byClass["F1"]
# Create a data frame
metrics_df <- data.frame(Metric = c("Accuracy", "Precision", "Recall", "F1 Score"),
Value = c(accuracy, precision, recall, f1_score))
# Assuming you have the metrics_df from the previous code
transposed_df <- t(metrics_df)
# Print the transposed data frame
print(transposed_df)
166 + 60 + 67 + 44
write_csv(df, 'encoded_data.csv', row.names = FALSE)
library(tidyverse)
df <- read.csv("preprocessed_data2.csv")
library(nnet)
library(caTools)
library(VGAM)
library(MASS)
library(caret)
#encoding
df$Severity <- as.numeric(factor(df$Severity))
df$Month <- as.numeric(factor(df$Month))
df$Wind_Direction <- as.numeric(factor(df$Wind_Direction))
df$Weather_Condition <- as.numeric(factor(df$Weather_Condition))
df$Time_Of_Day <- as.numeric(factor(df$Time_Of_Day))
df <- df %>%
mutate_all(~ as.numeric(.))
str(df)
table(df$Severity)
head(df, 5)
write_csv(df, 'encoded_data.csv', row.names = FALSE)
write_csv(df, 'encoded_data.csv')
df <- read.csv("preprocessed_data.csv")
df$Severity <- as.numeric(factor(df$Severity))
df$Month <- as.numeric(factor(df$Month))
df$Wind_Direction <- as.numeric(factor(df$Wind_Direction))
df$Weather_Condition <- as.numeric(factor(df$Weather_Condition))
df$Time_Of_Day <- as.numeric(factor(df$Time_Of_Day))
df <- df %>%
mutate_all(~ as.numeric(.))
str(df)
table(df$Severity)
head(df, 5)
write_csv(df, 'encoded_data.csv')
df$Severity <- as.numeric(factor(df$Severity))
df$Month <- as.numeric(factor(df$Month))
df$Wind_Direction <- as.numeric(factor(df$Wind_Direction))
df$Weather_Condition <- as.numeric(factor(df$Weather_Condition))
df$Time_Of_Day <- as.numeric(factor(df$Time_Of_Day))
df <- df %>%
mutate_all(~ as.numeric(.))
str(df)
table(df$Severity)
head(df, 5)
write_csv(df, 'encoded_data.csv')
#set seed
set.seed(1)
#splitting the data
sample <- sample.split(df$Severity, SplitRatio = 0.7)
train_data <- subset(df, sample == TRUE)
test_data <- subset(df, sample == FALSE)
print(table(train_data$Severity))
print(table(test_data$Severity))
# Fit the multinomial logistic regression model
multinom_model <- multinom(Severity ~ ., data = train_data)
summary(multinom_model)
summary(ordinal_model)
predicted <- predict(multinom_model, newdata = test_data)
test_data$Severity <- as.factor(test_data$Severity)
# Create a confusion matrix
conf_matrix <- confusionMatrix(data = predicted, reference = test_data$Severity)
166 + 60 + 67 + 44
# Print the confusion matrix
print(conf_matrix)
table(train_data$Severity)
accuracy <- conf_matrix$overall["Accuracy"]
precision <- conf_matrix$byClass["Precision"]
recall <- conf_matrix$byClass["Sensitivity"]
f1_score <- conf_matrix$byClass["F1"]
# Create a data frame
metrics_df <- data.frame(Metric = c("Accuracy", "Precision", "Recall", "F1 Score"),
Value = c(accuracy, precision, recall, f1_score))
# Assuming you have the metrics_df from the previous code
transposed_df <- t(metrics_df)
# Print the transposed data frame
print(transposed_df)
library(tidyverse)
df <- read.csv("preprocessed_data.csv")
unique(df$Weather_Condition)
library(tidyverse)
library(tidyverse)
df <- read.csv("preprocessed_data.csv")
View(df)
colnames(df)
library(ggplot2)
library(corrplot)
# Numerical Variable Histogram
ggplot(df, aes(x = Temperature.F.)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
labs(title = "Temperature Distribution", x = "Temperature (F)", y = "Frequency")
View(df)
View(df)
# Create a subset of your data with numerical variables
numerical_data <- df[, c("Temperature.F.", "Wind_Chill.F.", "Humidity...", "Pressure.in.", "Visibility.mi.", "Wind_Speed.mph.", "Precipitation.in.", "Severity")]
# Create a color palette for the "Severity" levels
severity_colors <- c("1" = "blue", "2" = "green", "3" = "orange", "4" = "red")
# Create a custom plotting function for points
custom_panel_points <- function(x, y, col) {
points(x, y, pch = 16, col = col, cex = 1.5)
}
# Use the pairs function with custom plotting
pairs(numerical_data[, -8], col = severity_colors[numerical_data$Severity], pch = 16, cex = 1.5,
main = "Pair Plot with Severity as Hue",
panel = function(x, y, ...) {
custom_panel_points(x, y, severity_colors[numerical_data$Severity])
points(x, y, pch = 16, col = severity_colors[numerical_data$Severity], cex = 1.5)
})
# Install and load necessary packages
if (!requireNamespace("GGally", quietly = TRUE)) {
install.packages("GGally")
}
library(GGally)
# Subset data with numerical variables
numerical_data <- df[, c("Temperature.F.", "Wind_Chill.F.", "Humidity...", "Pressure.in.", "Visibility.mi.", "Wind_Speed.mph.", "Precipitation.in.", "Severity")]
# Create pair plot
ggpairs(numerical_data,
mapping = aes(color = Severity),
lower = list(continuous = wrap("points", alpha = 0.6)),
diag = list(continuous = wrap("barDiag", binwidth = 10))
)
summary(df)
info(df)
str(df)
df$Severity <- as.character(df$Severity)
# Subset data with numerical variables
numerical_data <- df[, c("Temperature.F.", "Wind_Chill.F.", "Humidity...", "Pressure.in.", "Visibility.mi.", "Wind_Speed.mph.", "Precipitation.in.", "Severity")]
# Create pair plot
ggpairs(numerical_data,
mapping = aes(color = Severity),
lower = list(continuous = wrap("points", alpha = 0.6)),
diag = list(continuous = wrap("barDiag", binwidth = 10))
)
1 + 1
dsd
ds
xcxc
# Install and load the gplots package if not already installed
if (!requireNamespace("gplots", quietly = TRUE)) {
install.packages("gplots")
}
library(gplots)
# Create a subset of your data with numerical variables
numerical_data <- df[, c("Temperature.F.", "Wind_Chill.F.", "Humidity...", "Pressure.in.", "Visibility.mi.", "Wind_Speed.mph.", "Precipitation.in.")]
# Create a heatmap
heatmap.2(as.matrix(numerical_data),
trace = "none",   # Don't show row or column names
col = heat.colors(256),  # Color palette
scale = "row",    # Scale rows
key = TRUE,       # Show color key
density.info = "none",  # Don't show density plot
margins = c(8, 8),  # Adjust margins
main = "Heatmap of Numerical Variables with Severity"
)
library(ggplot2)
info(df)
str(df)
str(df$Humidity...)
# Subset data with numerical variables
numerical_data <- df[, c("Temperature.F.", "Wind_Chill.F.", "Humidity...", "Pressure.in.", "Visibility.mi.", "Wind_Speed.mph.", "Precipitation.in.")]
# Calculate the correlation matrix
cor_matrix <- cor(numerical_data)
# Install and load necessary packages
if (!requireNamespace("corrplot", quietly = TRUE)) {
install.packages("corrplot")
}
library(corrplot)
# Create a heatmap of the correlation mat
corrplot(cor_matrix, method = "color")
# Subset data with numerical variables
numerical_data <- df[, c("Temperature.F.", "Wind_Chill.F.", "Humidity...", "Pressure.in.", "Visibility.mi.", "Wind_Speed.mph.", "Precipitation.in.")]
# Calculate the correlation matrix
cor_matrix <- cor(numerical_data)
# Create a heatmap of the correlation matrix with numeric values
corrplot(cor_matrix, method = "color", type = "upper", tl.col = "black", tl.srt = 45)
# Subset data with numerical variables
numerical_data <- df[, c("Temperature.F.", "Wind_Chill.F.", "Humidity...", "Pressure.in.", "Visibility.mi.", "Wind_Speed.mph.", "Precipitation.in.")]
# Calculate the correlation matrix
cor_matrix <- cor(numerical_data)
# Create a heatmap of the correlation matrix
corrplot(cor_matrix, method = "color")
corrplot(cor_matrix, method = "color", tl.col = "black", tl.srt = 45)
# Create a heatmap of the correlation matrix with numeric values
corrplot(cor_matrix, method = "color", tl.col = "black", tl.srt = 45, addCoef.col = "black")
# Convert Severity to factor if it's not already
df$Severity <- as.factor(df$Severity)
# Create pair plot with hue based on Severity
ggpairs(df, columns = c("Temperature.F.", "Wind_Chill.F.", "Humidity...", "Pressure.in.", "Visibility.mi.", "Wind_Speed.mph.", "Precipitation.in."),
mapping = aes(color = Severity))
ggpairs(numerical_data)
df.is.na()
is.na(df)
is.na(df).sum()
sum(is.na(df))
str(numerical_data)
install.packages("sf")
# Subset data with numerical variables
numerical_data <- df[, c("Temperature.F.", "Wind_Chill.F.", "Humidity...", "Pressure.in.", "Wind_Speed.mph.", "Precipitation.in.")]
# Convert Severity to factor if it's not already
df$Severity <- as.factor(df$Severity)
# Create pair plot with hue based on Severity
ggpairs(df, columns = c("Temperature.F.", "Wind_Chill.F.", "Humidity...", "Pressure.in.", "Wind_Speed.mph.", "Precipitation.in."),
mapping = aes(color = Severity))
library(GGally)
# Subset data with numerical variables
numerical_data <- df[, c("Temperature.F.", "Wind_Chill.F.", "Humidity...", "Pressure.in.", "Wind_Speed.mph.", "Precipitation.in.")]
# Convert Severity to factor if it's not already
df$Severity <- as.factor(df$Severity)
# Create pair plot with hue based on Severity
ggpairs(df, columns = c("Temperature.F.", "Wind_Chill.F.", "Humidity...", "Pressure.in.", "Wind_Speed.mph.", "Precipitation.in."),
mapping = aes(color = Severity), lower = list(continuous = "points"), diag = list(continuous = "bar"))
str(df)
df$Month <- as.factor(df$Month)
ggplot(clean_df, aes(x = Time_Of_Day, fill = Severity)) +
geom_bar(position = "dodge", color = "white") +
# Set labels and title
labs(x = "Time Category", y = "Count", title = "Severity Count by Time Category") +
# Customize colors (you can choose your own palette)
scale_fill_manual(values = c("1" = "#440154FF", "2" = "#21908CFF", "3" = "#FDE725FF", "4" = "#FFFFFF")) +
# Show legend
guides(fill = guide_legend(title = "Severity")) +
# Adjust the plot size
theme(legend.position="top", legend.box.background = element_rect(color = "black"),
plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df, aes(x = Time_Of_Day, fill = Severity)) +
geom_bar(position = "dodge", color = "white") +
# Set labels and title
labs(x = "Time Category", y = "Count", title = "Severity Count by Time Category") +
# Customize colors (you can choose your own palette)
scale_fill_manual(values = c("1" = "#440154FF", "2" = "#21908CFF", "3" = "#FDE725FF", "4" = "#FFFFFF")) +
# Show legend
guides(fill = guide_legend(title = "Severity")) +
# Adjust the plot size
theme(legend.position="top", legend.box.background = element_rect(color = "black"),
plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df, aes(x = Month, fill = Severity)) +
geom_bar(position = "dodge", color = "white") +
# Set labels and title
labs(x = "Time Category", y = "Count", title = "Severity Count by Time Category") +
# Customize colors (you can choose your own palette)
#scale_fill_manual(values = c("1" = "#440154FF", "2" = "#21908CFF", "3" = "#FDE725FF", "4" = "#FFFFFF")) +
# Show legend
guides(fill = guide_legend(title = "Severity")) +
# Adjust the plot size
theme(legend.position="top", legend.box.background = element_rect(color = "black"),
plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 45, hjust = 1))
str(df)
unique(df$Weather_Condition)
ggplot(df, aes(x = Month, fill = Severity)) +
geom_bar(position = "dodge", color = "white") +
# Set labels and title
labs(x = "Month", y = "Count", title = "Severity Count by Month") +
# Customize colors (you can choose your own palette)
#scale_fill_manual(values = c("1" = "#440154FF", "2" = "#21908CFF", "3" = "#FDE725FF", "4" = "#FFFFFF")) +
# Show legend
guides(fill = guide_legend(title = "Severity")) +
# Adjust the plot size
theme(legend.position="top", legend.box.background = element_rect(color = "black"),
plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 45, hjust = 1))
# Create a bar plot
ggplot(df, aes(x = factor(Month, levels = 1:12), fill = Severity)) +
geom_bar(position = "dodge", color = "white") +
# Set labels and title
labs(x = "Month", y = "Count", title = "Severity Count by Month") +
# Customize colors (you can choose your own palette)
#scale_fill_manual(values = c("1" = "#440154FF", "2" = "#21908CFF", "3" = "#FDE725FF", "4" = "#FFFFFF")) +
# Show legend
guides(fill = guide_legend(title = "Severity")) +
# Adjust the plot size
theme(legend.position="top", legend.box.background = element_rect(color = "black"),
plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 45, hjust = 1))
# Create a bar plot
ggplot(df, aes(x = Month, fill = Severity)) +
geom_bar(position = "dodge", color = "white") +
# Set labels and title
labs(x = "Month", y = "Count", title = "Severity Count by Month") +
# Customize colors (you can choose your own palette)
# scale_fill_manual(values = c("1" = "#440154FF", "2" = "#21908CFF", "3" = "#FDE725FF", "4" = "#FFFFFF")) +
# Show legend
guides(fill = guide_legend(title = "Severity")) +
# Adjust the plot size
theme(legend.position="top", legend.box.background = element_rect(color = "black"),
plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 45, hjust = 1)) +
# Modify x-axis labels
scale_x_continuous(breaks = 1:12, labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))
ggplot(df, aes(x = factor(Month), fill = Severity)) +
geom_bar(position = "dodge", color = "white") +
# Set labels and title
labs(x = "Month", y = "Count", title = "Severity Count by Month") +
# Customize colors (you can choose your own palette)
# scale_fill_manual(values = c("1" = "#440154FF", "2" = "#21908CFF", "3" = "#FDE725FF", "4" = "#FFFFFF")) +
# Show legend
guides(fill = guide_legend(title = "Severity")) +
# Adjust the plot size
theme(legend.position="top", legend.box.background = element_rect(color = "black"),
plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 45, hjust = 1)) +
# Modify x-axis labels
scale_x_discrete(labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))
ggplot(df, aes(x = factor(Month), fill = Severity)) +
geom_bar(position = "dodge", color = "white") +
labs(x = "Month", y = "Log Count", title = "Severity Count by Month (Log Scale)") +
guides(fill = guide_legend(title = "Severity")) +
theme(legend.position = "top", legend.box.background = element_rect(color = "black"),
plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_log10() + scale_x_discrete(labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))
ggplot(df, aes(x = factor(Month), fill = Severity)) +
geom_bar(position = "dodge", color = "white", position = position_fill()) +
labs(x = "Month", y = "Proportion", title = "Severity Proportion by Month") +
guides(fill = guide_legend(title = "Severity")) +
theme(legend.position = "top", legend.box.background = element_rect(color = "black"),
plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 45, hjust = 1))
# Create a bar plot with normalized counts
ggplot(df, aes(x = factor(Month), fill = Severity)) +
geom_bar(position = "dodge", color = "white", position = position_fill()) +
labs(x = "Month", y = "Proportion", title = "Severity Proportion by Month") +
guides(fill = guide_legend(title = "Severity")) +
theme(legend.position = "top", legend.box.background = element_rect(color = "black"),
plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 45, hjust = 1))
# Create a bar plot with normalized counts
ggplot(df, aes(x = factor(Month), fill = Severity)) +
geom_bar(position = "fill", color = "white") +
labs(x = "Month", y = "Proportion", title = "Severity Proportion by Month") +
guides(fill = guide_legend(title = "Severity")) +
theme(legend.position = "top", legend.box.background = element_rect(color = "black"),
plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 45, hjust = 1))
library(tidyverse)
library(caret)
library(caTools)
library(class)
#importing the dataset
dataset <- read_csv('reduced_data.csv')
#Checking the properties of the dataset
str(dataset) #information of the features data types
summary(dataset) #descriptive statistic of the dataset
#checking the null values of each column
null_counts <- colSums(is.na(dataset))
print(null_counts)
# sum of null values
sum(null_counts)
# sum of columns
sum(colnames(df))
# sum of columns
ncol(df)
# sum of columns
ncol(dataset)
# sum of columns
ncol(dataset)
# sum of null values
sum(null_counts)
#importing the dataset
dataset <- read_csv('preprocessed_data.csv')
# sum of columns
ncol(dataset)
# sum of null values
sum(null_counts)
#checking the null values of each column
null_counts <- colSums(is.na(dataset))
print(null_counts)
# sum of columns
ncol(dataset)
# sum of null values
sum(null_counts)
